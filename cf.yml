AWSTemplateFormatVersion: "2010-09-09"
Description: Minecraft Spot Price Server via Docker / ECS
Parameters:
  LambdaUrlDomain:
    Description: The domain to use for the Lambda Function URL
    Type: String

  ECSAMI:
    Description: AWS ECS AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/kernel-5.10/arm64/recommended/image_id
    # /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id - AMD64

  LambdaUrlCertificateArn:
    Description: The ARN of the certificate to use for the Lambda Function URL
    Type: String

  ServerState:
    Type: String
    Description: "Running: A spot instance will launch shortly after setting this parameter; your Minecraft server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Minecraft container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues: 
    - Running
    - Stopped

  InstanceType:
    Type: String
    Description: "t3.medium is a good cost-effective instance, 2 vCPUs and 3.75 GB of RAM with moderate network performance. Change at your discretion. https://aws.amazon.com/ec2/instance-types/."
    Default: t3.medium

  SpotPrice:
    Type: String
    Description: "A t3.medium shouldn't cost much more than a cent per hour. Note: Leave this blank to use on-demand pricing."
    Default: "0.015"

  ContainerInsights:
    Type: String
    Description: "Enable/Disable ECS Container Insights for ECS Cluster"
    Default: disabled
    AllowedValues:
    - enabled
    - disabled

  EntryPoint:
    Type: CommaDelimitedList
    Description: "Task entrypoint (Optional - image default is script /start)"

  Command:
    Type: CommaDelimitedList
    Description: "Task command (Optional - image default is empty)"

  LogGroupName:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: /ecs/minecraft-spot

  LogGroupRetentionInDays:
    Type: Number
    Description: (Log retention in days)
    Default: 7

  LogStreamPrefix:
    Type: String
    Description: (Optional)
    Default: 'minecraft-server'

  HostedZoneId:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply the hosted zone ID here.
    Default: ''

  RecordName:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply the name of the record here (e.g. minecraft.mydomain.com).
    Default: ''

  MinecraftImageTag:
    Type: String
    Description: "Java version (Examples include latest, adopt13, openj9, etc) Refer to tag descriptions available here: https://github.com/itzg/docker-minecraft-server) - Multi Architecture"
    Default: 'latest'

  MinecraftTypeTag:
    Type: String
    Description: "(Examples include SPIGOT, BUKKIT, TUINITY, etc) Refer to tag descriptions available here: https://github.com/itzg/docker-minecraft-server)"
    Default: "PAPER"

  AdminPlayerNames:
    Type: String
    Description: Op/Administrator Players
    Default: ''

  Difficulty:
    Type: String
    Description: "The game's difficulty"
    Default: normal
    AllowedValues:
    - peaceful
    - easy
    - normal
    - hard

  Whitelist:
    Type: String
    Description: Usernames of your friends
    Default: ''

  MinecraftVersion:
    Type: String
    Description: Server minecraft version
    Default: ''

  Memory:
    Type: String
    Description: How much Memory to allocate for the JVM
    Default: '2G'

  Seed:
    Type: String
    Description: The seed used to generate the world

  MaxPlayers:
    Type: Number
    Description: Max number of players that can connect simultaneously (default 20)
    Default: -1

  ViewDistance:
    Type: Number
    Description: Max view radius (in chunks) the server will send to the client (default 10)
    Default: -1

  GameMode:
    Type: String
    Description: "Options: creative, survival (default), adventure, spectator (v1.8+)"
    Default: survival
    AllowedValues:
    - creative
    - survival
    - adventure
    - spectator

  LevelType:
    Type: String
    Description: "Options: DEFAULT, FLAT, LARGEBIOMES, AMPLIFIED, CUSTOMIZED, BUFFET, BIOMESOP (v1.12-), BIOMESOPLENTY (v1.15+)"
    Default: DEFAULT
    AllowedValues:
    - DEFAULT
    - FLAT
    - LARGEBIOMES
    - AMPLIFIED
    - CUSTOMIZED
    - BUFFET
    - BIOMESOP
    - BIOMESOPLENTY

  EnableRollingLogs:
    Type: String
    Description: "By default the log file will grow without limit. Set to true to use a rolling log strategy."
    Default: false
    AllowedValues:
    - true
    - false

  Timezone:
    Type: String
    Description: "Change the server's timezone. Use the canonical name of the format: Area/Location (e.g. America/New_York)"

  PublicKey:
    Type: String
    Description: A public key to add to the instance(s)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Essential Configuration
        Parameters:
        - ServerState
        - InstanceType
        - SpotPrice
      - Label:
          default: Server Settings
        Parameters:
        - MinecraftImageTag
      - Label:
          default: Optional Server Settings
        Parameters:
        - MinecraftTypeTag
        - AdminPlayerNames
        - Difficulty
        - Whitelist
        - MinecraftVersion
        - Memory
        - Seed
        - MaxPlayers
        - ViewDistance
        - GameMode
        - LevelType
        - EnableRollingLogs
        - Timezone
      - Label:
          default: Optional ECS Cluster and Task Configuration
        Parameters:
        - ContainerInsights
        - EntryPoint
        - Command
        - LogGroupName
        - LogGroupRetentionInDays
        - LogStreamPrefix
      - Label: 
          default: Optional DNS Configuration
        Parameters:
        - HostedZoneId
        - RecordName
    ParameterLabels:
      ServerState:
        default: "Update this parameter to shut down / start up your Minecraft server as required to save on cost. Takes a few minutes to take effect."
      InstanceType:
        default: "Which instance type? You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      SpotPrice:
        default: "Maximum spot price per hour? Leave blank to disable spot pricing."
      MinecraftImageTag:
        default: "Which version of Minecraft do you want to launch?"
      MinecraftTypeTag:
        default: "Which type of Minecraft do you want to launch?"
      AdminPlayerNames:
        default: "A comma delimited list (no spaces) of player names to be admins"
      Difficulty:
        default: "Which difficulty?"
      Whitelist:
        default: "A comma delimited list (no spaces) of player names"
      MinecraftVersion:
        default: "Minecraft version ie 1.16.3"
      ContainerInsights:
        default: "ECS Container Insights provide additional container metrics, and supports collection of Prometheus metrics.  Additional AWS charges may apply."
      EntryPoint:
        default: "Task/container --entrypoint, comma separated e.g. /bin/bash,-c"
      Command:
        default: "Task/container command, comma separated arguments passed to entrypoint"
      LogGroupName:
        default: "Create CloudWatch Log Group with this name e.g. /Minecraft or /ecs/minecraft, and direct container logs there"
      LogGroupRetentionInDays:
        default: "Number of days to retain CloudWatch logs"
      LogStreamPrefix:
        default: "Prefix for container log stream e.g. minecraft-server"
      HostedZoneId:
        default: "If you have a hosted zone in Route 53 and wish to update a DNS record whenever your Minecraft instance starts, supply the hosted zone ID here."
      RecordName:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply a record name here (e.g. minecraft.mydomain.com)."
      Memory:
        default: "If you wish to increase the Java memory-heap limit of 1GB. Format: <size>[g|G|m|M|k|K]"
      Seed:
        default: "Seed for world generation"
      MaxPlayers:
        default: "Max simultaneous players"
      ViewDistance:
        default: "Max view distance"
      GameMode:
        default: "The Minecraft game mode"
      LevelType:
        default: "Level type for world generation"
      EnableRollingLogs:
        default: "Whether to enable rolling logs"
      Timezone:
        default: "The server's timezone"

Conditions:
  MinecraftTypeTagProvided: !Not [ !Equals [ !Ref MinecraftTypeTag, '' ] ]
  AdminPlayerNamesProvided: !Not [ !Equals [ !Ref AdminPlayerNames, '' ] ]
  DifficultyProvided: !Not [ !Equals [ !Ref Difficulty, '' ] ]
  WhitelistProvided: !Not [ !Equals [ !Ref Whitelist, '' ] ]
  MinecraftVersionProvided: !Not [ !Equals [ !Ref MinecraftVersion, '' ] ]
  EntryPointProvided: !Not [ !Equals [ !Join [ "", !Ref EntryPoint ], '' ] ]
  CommandProvided: !Not [ !Equals [ !Join [ "", !Ref Command ], '' ] ]
  LogGroupNameProvided: !Not [ !Equals [ !Ref LogGroupName, '' ] ]
  LogStreamPrefixProvided:  !Not [ !Equals [ !Ref LogStreamPrefix, '' ] ]
  DnsConfigEnabled: !And [ !Not [ !Equals [ !Ref HostedZoneId, '' ] ], !Not [ !Equals [ !Ref RecordName, '' ] ] ]
  MemoryProvided: !Not [ !Equals [ !Ref Memory, '' ] ]
  SeedProvided: !Not [ !Equals [ !Ref Seed, '' ] ]
  MaxPlayersProvided: !Not [ !Equals [ !Ref MaxPlayers, -1 ] ]
  ViewDistanceProvided: !Not [ !Equals [ !Ref ViewDistance, -1 ] ]
  GameModeProvided: !Not [ !Equals [ !Ref GameMode, '' ] ]
  LevelTypeProvided: !Not [ !Equals [ !Ref LevelType, '' ] ]
  EnableRollingLogsProvided: !Not [ !Equals [ !Ref EnableRollingLogs, '' ] ]
  TimezoneProvided: !Not [ !Equals [ !Ref Timezone, '' ] ]


Mappings:
  ServerState:
    Running:
      DesiredCapacity: 1
    Stopped:
      DesiredCapacity: 0

Resources:

  # ====================================================
  # BASIC VPC
  # ====================================================

  Vpc: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.100.0.0/26
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - !GetAZs 
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc  
      MapPublicIpOnLaunch: True
      # TODO Add a tag with the AZ name in it
      
  SubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 1
      - !GetAZs 
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: True
      # TODO Add a tag with the AZ name in it

  SubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB  

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 2
      - !GetAZs 
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 2, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: True
      # TODO Add a tag with the AZ name in it

  SubnetCRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC  

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc    

  Route:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # ====================================================
  # EFS FOR PERSISTENT DATA
  # ====================================================

  Efs:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      ThroughputMode: bursting # elastic

  MountA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  MountB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  MountC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetC

  EfsSg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-efs"
      GroupDescription: !Sub "${AWS::StackName}-efs"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg
      VpcId: !Ref Vpc
      
  # ====================================================
  # INSTANCE CONFIG
  # ====================================================

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "${AWS::StackName}-key-pair"
      KeyType: rsa
      PublicKeyMaterial: !Ref PublicKey


  Ec2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-ec2"
      GroupDescription: !Sub "${AWS::StackName}-ec2"
      SecurityGroupIngress:
      - FromPort: 25565
        ToPort: 25565
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-launch-template"
      LaunchTemplateData:
        CreditSpecification:
          CpuCredits: unlimited
        ImageId: !Ref ECSAMI
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            MaxPrice: !Ref SpotPrice # If you do not specify this parameter, you will pay the current Spot price.
            InstanceInterruptionBehavior: terminate
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
        # NetworkInterfaces: Public IP comes from Subnet settings
          Arn: !GetAtt InstanceProfile.Arn
        KeyName: !Ref KeyPair
        SecurityGroupIds:
        - !Ref Ec2Sg
        # Replace root volume with a smaller one
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 30
            VolumeType: gp3
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
            yum install -y amazon-efs-utils
            mkdir /opt/minecraft
            mount -t efs ${Efs}:/ /opt/minecraft
            chown 845:845 /opt/minecraft

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MountA
    - MountB
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      LaunchTemplate:
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref LaunchTemplate
      NewInstancesProtectedFromScaleIn: false # https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html
      MaxSize: 1
      MinSize: 0
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
    Metadata:
      LaunchEvent: !If [ DnsConfigEnabled, !GetAtt LaunchEvent.Arn, "" ]

  InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref InstanceRole

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      ClusterSettings:
        - Name: containerInsights
          Value: !Ref ContainerInsights

  ECSCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling:
          MaximumScalingStepSize: 1
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED # If enabled ECS prevents EC2 instances from terminating on scale in

  EcsClusterCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviders:
        - !Ref ECSCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1

# TODO - Add CPU / Memory usage
  EcsService:
    Type: AWS::ECS::Service
    Properties: 
      Cluster: !Ref EcsCluster
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service"
      TaskDefinition: !Ref EcsTask  
      CapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1
          Base: 0
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

# TODO - Add healthcheck?
  EcsTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Volumes:
      - Host:
          SourcePath: /opt/minecraft
        Name: minecraft
      NetworkMode: "bridge"
      ContainerDefinitions:      
        - Name: minecraft
          MemoryReservation: 2048
          Image: !Sub "itzg/minecraft-server:${MinecraftImageTag}"
          EntryPoint: !If
              - EntryPointProvided
              - !Ref EntryPoint
              - !Ref 'AWS::NoValue'
          Command: !If
              - CommandProvided
              - !Ref Command
              - !Ref 'AWS::NoValue'
          PortMappings:
          - ContainerPort: 25565
            HostPort: 25565
            Protocol: tcp
          HealthCheck:
            Command: ["CMD-SHELL", "mc-health"]
            Interval: 5
            Retries: 10
            StartPeriod: 60
            Timeout: 15
          LogConfiguration:
            !If
            - LogGroupNameProvided # If this is provided - use this
            - LogDriver: awslogs
              Options:
                awslogs-group: !Ref CloudWatchLogGroup
                awslogs-stream-prefix: !If
                - LogStreamPrefixProvided
                - !Sub ${LogStreamPrefix}
                - !Ref 'AWS::NoValue'
                awslogs-region: !Ref AWS::Region
                awslogs-create-group: true
            - !Ref 'AWS::NoValue'
          MountPoints:
          - ContainerPath: /data
            SourceVolume: minecraft
            ReadOnly: false
          Environment:
            - Name: "EULA"
              Value: "TRUE"
            - Name: OVERRIDE_SERVER_PROPERTIES # Manually manage server.properties
              Value: "false"
            - Name: SKIP_SERVER_PROPERTIES # Don't create server.properties file
              Value: "true"
            - !If
              - MinecraftTypeTagProvided
              - Name: "TYPE"
                Value: !Sub "${MinecraftTypeTag}"
              - !Ref 'AWS::NoValue'
            - !If
              - AdminPlayerNamesProvided
              - Name: "OPS"
                Value: !Sub "${AdminPlayerNames}"
              - !Ref 'AWS::NoValue'
            - !If
              - DifficultyProvided
              - Name: "DIFFICULTY"
                Value: !Sub "${Difficulty}"
              - !Ref 'AWS::NoValue'
            - !If
              - WhitelistProvided
              - Name: "WHITELIST"
                Value: !Sub "${Whitelist}"
              - !Ref 'AWS::NoValue'
            - !If
              - MinecraftVersionProvided
              - Name: "VERSION"
                Value: !Sub "${MinecraftVersion}"
              - !Ref 'AWS::NoValue'
            - !If
              - MemoryProvided
              - Name: "MEMORY"
                Value: !Sub "${Memory}"
              - !Ref 'AWS::NoValue'
            - !If
              - SeedProvided
              - Name: "SEED"
                Value: !Sub "${Seed}"
              - !Ref 'AWS::NoValue'
            - !If
              - MaxPlayersProvided
              - Name: "MAX_PLAYERS"
                Value: !Sub "${MaxPlayers}"
              - !Ref 'AWS::NoValue'
            - !If
              - ViewDistanceProvided
              - Name: "VIEW_DISTANCE"
                Value: !Sub "${ViewDistance}"
              - !Ref 'AWS::NoValue'
            - !If
              - GameModeProvided
              - Name: "MODE"
                Value: !Sub "${GameMode}"
              - !Ref 'AWS::NoValue'
            - !If
              - LevelTypeProvided
              - Name: "LEVEL_TYPE"
                Value: !Sub "${LevelType}"
              - !Ref 'AWS::NoValue'
            - !If
              - EnableRollingLogsProvided
              - Name: "ENABLE_ROLLING_LOGS"
                Value: !Sub "${EnableRollingLogs}"
              - !Ref 'AWS::NoValue'
            - !If
              - TimezoneProvided
              - Name: "TZ"
                Value: !Sub "${Timezone}"
              - !Ref 'AWS::NoValue'

  CloudWatchLogGroup:
    Condition: LogGroupNameProvided
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${LogGroupName}"
      RetentionInDays: !Sub "${LogGroupRetentionInDays}"

  # ====================================================
  # SET DNS RECORD
  # ====================================================

  SetDNSRecordLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ChangeDNSRecords
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "route53:ChangeResourceRecordSets"
                Resource: !Sub "arn:aws:route53:::hostedzone/${HostedZoneId}"
              - Effect: "Allow"
                Action: "ec2:DescribeInstance*"
                Resource: "*"

  SetDNSRecordLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Environment:
        Variables:
          HostedZoneId: !Ref HostedZoneId
          RecordName: !Ref RecordName
      Code:
        ZipFile: |
          import boto3
          import os
          def handler(event, context):
            new_instance = boto3.resource('ec2').Instance(event['detail']['EC2InstanceId'])
            boto3.client('route53').change_resource_record_sets(
              HostedZoneId= os.environ['HostedZoneId'],
              ChangeBatch={
                  'Comment': 'updating',
                  'Changes': [
                      {
                          'Action': 'UPSERT',
                          'ResourceRecordSet': {
                              'Name': os.environ['RecordName'],
                              'Type': 'A',
                              'TTL': 60,
                              'ResourceRecords': [
                                  {
                                      'Value': new_instance.public_ip_address
                                  },
                              ]
                          }
                      },
                  ]
              })
      Description: Sets Route 53 DNS Record for Minecraft
      FunctionName: !Sub "${AWS::StackName}-set-dns"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SetDNSRecordLambdaRole.Arn
      Runtime: python3.7
      Timeout: 20

  LaunchEvent:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties: 
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
          - !Sub "${AWS::StackName}-asg"
      Name: !Sub "${AWS::StackName}-instance-launch"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "${AWS::StackName}-set-dns"

  LaunchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent.Arn

  # ====================================================
  # Server Status Lambda
  # ====================================================

  ServerStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ASGPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                  - ec2:DescribeInstances
                  - ecs:ListServices
                  - ecs:ListTasks
                  - ecs:DescribeServices
                  - ecs:DescribeTasks
                Resource: '*'

  LambdaUrlPublicPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ServerStatusLambda
      FunctionUrlAuthType: 'NONE'
      Action: lambda:InvokeFunctionUrl
      Principal: '*'

  ServerStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import botocore
          import json
          import os

          ASG_NAME = os.environ['ASG_NAME']
          ECS_CLUSTER_NAME = os.environ['ECS_CLUSTER_NAME']

          def lambda_handler(event, context):
              group_name = ASG_NAME
              asg_controller = AutoScalingGroupController(group_name)
              if event['rawPath'] == '/on':
                  return asg_controller.turn_on()
              elif event['rawPath'] == '/off':
                  return asg_controller.turn_off()
              elif event['rawPath'] == '/status':
                  return asg_controller.get_status()
              else:
                  return {
                      "statusCode": 404,
                      "body": json.dumps({
                          "message": "Invalid URL",
                      }),
                      "isBase64Encoded": False
                  }

          class AutoScaler:
              def __init__(self, group_name):
                  self.client = boto3.client('autoscaling')
                  self.ec2_client = boto3.client('ec2')
                  self.ecs_client = boto3.client('ecs')
                  self.group_name = group_name
                  
              def set_desired_capacity(self, capacity):
                  try:
                      response = self.client.set_desired_capacity(
                          AutoScalingGroupName=self.group_name,
                          DesiredCapacity=capacity,
                          HonorCooldown=True
                      )
                  except self.client.Client.exceptions.ScalingActivityInProgressFault as e:
                      return e
                  return response
              
              def describe_auto_scaling_group(self):
                  try:
                      response = self.client.describe_auto_scaling_groups(
                          AutoScalingGroupNames=[self.group_name]
                      )

                      desired_capacity = response['AutoScalingGroups'][0]['DesiredCapacity']
                      return desired_capacity

                  except botocore.exceptions.ClientError as e:
                      return e
                  
              def instance_running(self):
                  # First determine that there is an instance in the Auto Scaling Group
                  try:
                      response = self.client.describe_auto_scaling_groups(
                          AutoScalingGroupNames=[self.group_name]
                      )
                      if len(response['AutoScalingGroups'][0]['Instances']) == 0:
                          return False
                      else:
                          return True
                  except botocore.exceptions.ClientError as e:
                      return str(e)
                  
              def get_status_by_task_definition(self):
                  # First determine the instance is running
                  if self.instance_running():
                      # Get the status of the task running on the ECS cluster
                      try:
                          list_tasks_response = self.ecs_client.list_tasks(
                              cluster=ECS_CLUSTER_NAME,
                              desiredStatus='RUNNING',
                              launchType='EC2'
                          )

                          # As there is only one task running on the cluster, we can get the task definition from the first item in the list
                          task_definition_arn = list_tasks_response['taskArns'][0]

                          # Get the health status of the task
                          try:
                              describe_tasks_response = self.ecs_client.describe_tasks(
                                  cluster=ECS_CLUSTER_NAME,
                                  tasks=[task_definition_arn]
                              )
                              # First determine the lifecycle state of the task
                              task_lifecycle_state = describe_tasks_response['tasks'][0]['lastStatus']

                              # If the task is not running, then return the current status
                              if task_lifecycle_state != 'RUNNING':
                                  return "The server is not running. Current status: " + task_lifecycle_state
                              
                              # If the task is running, then get the health status of the container
                              else:
                                  container_health_status = describe_tasks_response['tasks'][0]['containers'][0]['healthStatus']
                                  return "The server is running. Current status: " + container_health_status
                              
                          except Exception as e:
                              return "Something went wrong:" + e

                      except Exception as e:
                          return "Something went wrong:" + e
                  else:
                      return "The server is not currently running."

          class AutoScalingGroupController:
              def __init__(self, group_name):
                  self.autoscaler = AutoScaler(group_name)
                  
              def turn_on(self):
                  auto_scaling_group_capacity = self.autoscaler.describe_auto_scaling_group()
                  if isinstance(auto_scaling_group_capacity, botocore.exceptions.ClientError):
                      return {
                          "statusCode": 500,
                          "body": json.dumps({
                              "message": "Error: " + str(auto_scaling_group_capacity),
                          }),
                          "isBase64Encoded": False
                      }
                  elif auto_scaling_group_capacity == 1:
                      return {
                          "statusCode": 200,
                          "body": json.dumps({
                              "message": "Desired Capacity is already 1",
                          }),
                          "isBase64Encoded": False
                      }
                  else:
                      amended_capacity = self.autoscaler.set_desired_capacity(1)
                      if isinstance(amended_capacity, Exception):
                          return {
                              "statusCode": 400,
                              "body": json.dumps({
                                  "message": "Error: Scaling already in progress",
                              }),
                              "isBase64Encoded": False
                          }
                      else:
                          return {
                              "statusCode": 200,
                              "body": json.dumps({
                                  "message": "Desired Capacity set to 1",
                              }),
                              "isBase64Encoded": False
                          }
                  
              def turn_off(self):
                  auto_scaling_group_capacity = self.autoscaler.describe_auto_scaling_group()
                  if isinstance(auto_scaling_group_capacity, botocore.exceptions.ClientError):
                      return {
                          "statusCode": 500,
                          "body": json.dumps({
                              "message": "Error: " + str(auto_scaling_group_capacity),
                          }),
                          "isBase64Encoded": False
                      }
                  elif auto_scaling_group_capacity == 0:
                      return {
                          "statusCode": 200,
                          "body": json.dumps({
                              "message": "Desired Capacity is already 0",
                          }),
                          "isBase64Encoded": False
                      }
                  else:
                      amended_capacity = self.autoscaler.set_desired_capacity(0)
                      if isinstance(amended_capacity, Exception):
                          return {
                              "statusCode": 400,
                              "body": json.dumps({
                                  "message": "Error: Scaling already in progress",
                              }),
                              "isBase64Encoded": False
                          }
                      else:
                          return {
                              "statusCode": 200,
                              "body": json.dumps({
                                  "message": "Desired Capacity set to 0",
                              }),
                              "isBase64Encoded": False
                          }        
              # def get_status(self):
              #     status = self.autoscaler.get_status()
              #     return {
              #         "statusCode": 200,
              #         "body": json.dumps(status),
              #         "isBase64Encoded": False
              #     }

              def get_status(self):
                  status = self.autoscaler.get_status_by_task_definition()
                  # If the status returns an error, then return the error
                  if isinstance(status, Exception):
                      return {
                          "statusCode": 500,
                          "body": {
                              "message": str(status),
                          },
                          "isBase64Encoded": False
                      }
                  # Otherwise return the status
                  else:
                      return {
                          "statusCode": 200,
                          "body": json.dumps({
                              "message": status,
                          }),
                          "isBase64Encoded": False
                      }

      Description: Server Status Lambda Function
      FunctionName: !Sub "${AWS::StackName}-server-status"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt ServerStatusLambdaRole.Arn
      Runtime: python3.9
      Timeout: 20
      Environment:
        Variables:
          ASG_NAME: !Ref AutoScalingGroup

  ServerStatusLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt ServerStatusLambda.Arn
      AuthType: NONE # public

  LambdaUrlCloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "CloudFront Distribution for proxying to Lambda"
        Aliases: [!Ref LambdaUrlDomain]
        Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt ServerStatusLambdaUrl.FunctionUrl]] # Remove https:// from URL.
            Id: LambdaFunctionURL
            CustomOriginConfig:
              OriginSSLProtocols:
                - TLSv1.2
              OriginProtocolPolicy: https-only
        Enabled: True
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
          CachedMethods: ['GET', 'HEAD']
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # This is the ID of the CachingDisabled Policy
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # This is the ID of the AllViewer (Except Host) Policy
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # This is the ID of the ManagedSecurityHeaders Policy
          Compress: True
          TargetOriginId: LambdaFunctionURL
          ViewerProtocolPolicy: 'redirect-to-https'
        HttpVersion: http2
        PriceClass: PriceClass_100 # Europe and North America (lowest possible)
        ViewerCertificate:
          AcmCertificateArn: !Ref LambdaUrlCertificateArn # The ARN of a certificate provisioned in us-east-1 - the only region compatible with CloudFront
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: sni-only
Outputs:
  CheckInstanceIp:
    Description: To find your Minecraft instance IP address, visit the following link. Click on the instance to find its Public IP address.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#Instances:tag:aws:autoscaling:groupName=${AutoScalingGroup};sort=tag:Name"
  Domain:
    Description: The domain name of the Minecraft server
    Value: !Select [2, !Split ["/", !GetAtt ServerStatusLambdaUrl.FunctionUrl]] # Remove https:// from URL.